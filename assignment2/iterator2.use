model Iterator

-- classes

class Item
attributes
	type : String
operations
end

class Aggregate
-- attributes
	
operations
	createIterator()
	begin
		declare iterator:ConcreteIterator; 
		iterator := new ConcreteIterator;
	end
end

class ConcreteAggregate < Aggregate
attributes
	name : String;
	set : Bag(Item);
	numItems : Real
operations
	createIterator()
	begin
		declare iterator:ConcreteIterator;
		iterator:= new ConcreteIterator;
	end

	addToSet()	
	begin
		declare anItem:Item;
		self.numItems:=self.set->size();
		for s in self.set do
			anItem:= new Item;
			insert(anItem, self) into collection;
		end
	end
end

class Iterator 
-- attributes

operations
	next() : Aggregate
	hasNext() : Boolean
end

class ConcreteIterator < Iterator
attributes
	name : String;
	iterator : Iterator;
operations
	next() : ConcreteAggregate 
	hasNext() : Boolean
	getIterator() : Iterator
	begin
		result:=self.iterator;
	end
end

class Client
attributes
	name : String;
operations		
end

-- associations

association creates between
	ConcreteAggregate [1] role aggregate
	ConcreteIterator [0..1] role iterator
end

association collection between
	Item[0..*] role item
	ConcreteAggregate[1] role aggregate
end

association clientAg between
	Client [1] role client
	Aggregate [1] role agg
end

association clientIt between
	Client [1] role client
	Iterator [1] role iter
end

constraints

--context ConcreteAggregate::createIterator()
 	--pre createIterPre: not iterator.isDefined()
 	--pre preCollection: collection.isDefined()
 	--post createIterPost: iterator.isDefined()
 
 --context ConcreteIterator::next(): ConcreteAggregate
-- 	pre nextPre: hasNext = true
-- 	post: none
 	
--context ConcreteIterator::hasNext(): Boolean
 	--pre hasNextPre: collection.isDefined()
 	--post: none