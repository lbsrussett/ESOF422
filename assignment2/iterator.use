model Iterator

-- classes

class Item
attributes
	type:String;
operations

end

class Client
attributes
	name : String; 
operations
end

abstract class Aggregate
attributes
operations
	createIterator()
end

abstract class Iterator
attributes
operations
	hasNext()
	next()
end

class ConcreteAggregate < Aggregate
attributes
	name:String;
	collection:Set(Item);
operations
	createIterator()
	begin
		--declare iterator:ConcreteIterator; 
		--iterator := ConcreteIterator;
	end
end

class ConcreteIterator < Iterator
attributes
	name : String;
	--collection : Set(Item);
	position : Integer init : 0;
	hasNext : Boolean init : true;
operations
	--addSet(objectSet : Set(Item)) --consider adding to initialization of class somehow
	--begin
	--	declare collection:Set(Item);
	--	collection := objectSet;
	--end
	
	hasNext():Boolean
	begin
		--result:=hasNext;
	end
	
	next()
	begin
		--declare collection:Set(Object), position:Integer;
	--	result := collection[position];
		--position := position + 1;
	end
	
end

association creates between
	ConcreteAggregate [1] role aggregate
	ConcreteIterator [0..1] role iterator
end

association collection between
	Item[0..*] role item
	ConcreteAggregate[1] role aggregate
end

association clientIt between
	Client [0..*] role client
	Iterator [0..*] role iterator
	
end

association clientAg between
	Client [0..*] role client
	Aggregate [0..*] role aggregate
end

constraints

--context ConcreteAggregate::createIterator()
 	--pre createIterPre: not iterator.isDefined()
 	--pre preCollection: collection.isDefined()
 	--post createIterPost: iterator.isDefined()
 
 --context ConcreteIterator::next(): ConcreteAggregate
-- 	pre nextPre: hasNext = true
-- 	post: none
 	
--context ConcreteIterator::hasNext(): Boolean
 	--pre hasNextPre: collection.isDefined()
 	--post: none
 
