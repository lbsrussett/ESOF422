model Iterator

-- classes

class Aggregate
-- attributes
	
operations
	createIterator()
	
end

class ConcreteAggregate < Aggregate
attributes
	name : String
operations
	createIterator()
end

class Iterator 
attributes
	hasNext: Boolean

operations
	next() : Aggregate
	hasNext() : Boolean
end

class ConcreteIterator < Iterator
attributes
	name : String
	--hasNext: Boolean
operations
	next() : ConcreteAggregate 
	hasNext() : Boolean
	begin
	end
end

class Client
--attributes
--operations		
end

-- associations

association clientAg between
	Client [1] role client
	Aggregate [1] role agg
end

association clientIt between
	Client [1] role client
	Iterator [1] role iter
end

association creates between
	ConcreteAggregate [0..1] role collection
	ConcreteIterator [0..1] role iter
end

-- constraints

constraints
context ConcreteAggregate::createIterator()
	pre createIterPre: not iter.isDefined()
	post createIterPost: iter.isDefined()

--not sure how to make condition based on operation value
context ConcreteIterator::next(): ConcreteAggregate
	pre nextPre: hasNext = true
	--post: none

context ConcreteIterator::hasNext(): Boolean
	pre hasNextPre: collection.isDefined()
	--post: none


