model Game

enum Transition {neutral, attack, panic, die}

--classes

abstract class ShooterState
operations
	action(t:Transition)
	begin
	end

	endGame()
	begin
	end

	startOver()
	begin
	end
end

class inNeutral < ShooterState
operations
	action(t:Transition)
	begin
		if(t = Transition::panic) then
			self.shooter.shooterState := self.shooter.panicState;
		end;

		if(t = Transition::attack) then
			self.shooter.shooterState := self.shooter.attackState;
		end;
	end

	endGame()
	begin
	end

	startOver()
	begin
	end
end

class inAttack < ShooterState
operations
	action(t:Transition)
	begin
		if(t = Transition::neutral) then
			self.shooter.shooterState := self.shooter.neutralState;
		end;

		if(t = Transition::die) then
			self.shooter.shooterState := self.shooter.dieState;
		end;
	end

	endGame()
	begin
	end

	startOver()
	begin
	end
end

class inPanic < ShooterState
operations
	action(t:Transition)
	begin
		if(t = Transition::neutral) then
			self.shooter.shooterState := self.shooter.neutralState;
		end;

		if(t = Transition::die) then
			self.shooter.shooterState := self.shooter.dieState;
		end;
	end

	endGame()
	begin
	end

	startOver()
	begin
	end
end

class inDie < ShooterState
operations
	action(t:Transition)
	begin
	end

	endGame()
	begin
	end

	startOver()
	begin
	end
end

class Weapon
attributes
	name : String
	capacity : Integer
	ammo : Integer
end


class Shooter
attributes
	alive : Boolean
	health : Real init : 100
	strength : Real 
	weapons : Sequence(Weapon) 
	neutralState : ShooterState
	attackState : ShooterState
	panicState : ShooterState
	dieState : ShooterState
	shooterState : ShooterState init : neutralState
operations
initInstance()
    begin
       self.health := 100;
       self.strength := 1.0;
	   self.neutralState := new inNeutral;
	   self.attackState := new inAttack;
	   self.panicState := new inPanic;
	   self.dieState := new inDie;
	   
       self.shooterState := self.neutralState; -- we start in the inNeutral state
    end

    addWeapon(weapon:String, bullets:Integer)
    begin
    	declare w:Weapon;
    	w := new Weapon;
    	w.name := weapon;
    	w.capacity := bullets;
    	self.weapons := self.weapons->append(w);
    end

	seeOpponent() : Real
	begin
		result:=self.strength;
	end
	attack()
	begin
		--weapons[0].ammo := weapons[0].ammo-1 --remove ammo
	end
	
	panic()
	receiveBlow(blow : Real)
		begin
			self.health:=(self.health-blow);
		end
	lostOpponent()
		begin
			self.health:=100;
		end
	die()
		begin
			self.health:=0;
		end
	neutral()

statemachines
	psm StatePattern
		states
		    startUp:initial
			neutral       [shooterState = neutralState]
			attack        [shooterState = attackState]
			panic         [shooterState = panicState]
			die 		  [shooterState = dieState]
	    transitions
		    startUp -> neutral {create}
			neutral -> panic {[strength = 0.0] seeOpponent()} -- weapons.Empty()
			neutral -> attack {[strength = 1.0] seeOpponent()} -- weapons.notEmpty()
			attack -> neutral {lostOpponent()}
			attack -> die {[health = 0] receiveBlow()}
			panic -> die {[health = 0] receiveBlow()}
			panic -> neutral {lostOpponent()}
	 end

	psm Play
	states
		startUp:initial
		neutral  [health > 0]
		panic  [health > 0]
		attack  [health > 0]
		die  [health = 0]

	transitions
		startUp -> neutral {create}
		neutral -> panic {[strength = 1.0] seeOpponent()}
		neutral -> attack {[strength = 0.0] seeOpponent()}
		attack -> neutral {lostOpponent()}
		attack -> die {[blow = 100 and health = 0] receiveBlow()}
		panic -> die {[blow = 100 and health = 0] receiveBlow()}
		panic -> neutral {lostOpponent()}
	end
end	

class Map
attributes
end

class Obstacle
attributes
	size: Integer
	--position: Position
end

-- associations
association shooterState between
 ShooterState[1]
 Shooter[1]
end

association weapons between
	Shooter[1]
	Weapon[1..*]
end

association mapPlayers between
	Shooter [*] role players
	Map [1] role map
end

association obstacles between
	Obstacle [*] role terrain
	Map [1] role map
end